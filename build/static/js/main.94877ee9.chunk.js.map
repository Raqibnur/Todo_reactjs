{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","revomeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removerArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAiEeA,MA/Df,SAAkBC,GACd,MAAyBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAlE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAQ,MAEzBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAatB,OACI,qBAAKW,UAAU,WAAf,SACI,sBAAMA,UAAU,YAAYC,SAbf,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAKL,SACKL,EAAME,KACP,qCACA,mCACIoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,GAPT,YAQc,oBAEd,wBAAQQ,UAAU,mBAAlB,uBAIA,qCACI,mCACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,GAPT,YAQc,eAEd,wBAAQQ,UAAU,cAAlB,8B,uBCLLa,MA7CX,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAChD,EAAsB9B,mBAAS,CAC3BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QASRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OAEjB,sBACIrB,UAAWoB,EAAKE,WAAa,oBAAsB,WADvD,UAKI,qBAAmBC,QAAS,kBAAKR,EAAaK,EAAKjB,KAAnD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACA,cAAC,IAAD,CACAuB,QAAS,kBAAKP,EAAWI,EAAKjB,KAC9BH,UAAU,gBAEV,cAAC,IAAD,CACAuB,QAAS,kBAAKL,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAChDP,UAAU,mBAbLqB,OCqBEG,MA7Cf,WACI,MAAyBrC,mBAAS,IAAlC,mBAAO2B,EAAP,KAAcW,EAAd,KAmCA,OACI,gCACI,yDACA,cAAC,EAAD,CAAUxB,SApCF,SAAAmB,GACZ,GAAKA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAApC,CAIA,IAAMoB,EAAQ,CAAGP,GAAH,mBAAYN,IAE1BW,EAASE,OA8BL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAfP,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAQ2CZ,WApBrC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KACxDsB,EAAUI,IAkBmEZ,WA3B/D,SAACc,EAAQC,GAClBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCT5DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCJNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.94877ee9.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput]= useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef (null)\r\n\r\n    useEffect(()=>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e=>{\r\n        setInput(e.target.value)\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000 ),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <div className='todo-box'>\r\n            <form className='todo-from' onSubmit={handleSubmit}>\r\n                {props.edit ? (\r\n                <>\r\n                <input \r\n                    type='text' \r\n                    placeholder='Update Your Item' \r\n                    value={input} \r\n                    name='text' \r\n                    className='todo-ipnut'\r\n                    onChange={handleChange}\r\n                    ref={inputRef}\r\n                    className='todo-input edit'\r\n                />\r\n                <button className='todo-button edit'>Update</button>\r\n                </>\r\n                ):\r\n                (   \r\n                <>\r\n                    <input \r\n                        type='text' \r\n                        placeholder='Add a Todo' \r\n                        value={input} \r\n                        name='text' \r\n                        className='todo-ipnut'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                        className='todo-input'\r\n                    />\r\n                    <button className='todo-button'>Add Todo</button>\r\n                </>\r\n                )}\r\n\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiEditCircleLine } from 'react-icons/ri';\r\nimport { IoIosCloseCircleOutline } from 'react-icons/io';\r\n\r\n    function Todo({todos, completeTodo, revomeTodo, updateTodo}) {\r\n    const [edit, setEdit]=useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value =>{\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if (edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n    \r\n    <div \r\n        className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n        key={index}\r\n    > \r\n    \r\n        <div key={todo.id} onClick={()=> completeTodo(todo.id)}>\r\n            {todo.text}\r\n        </div>\r\n        <div className='icons'>\r\n        <IoIosCloseCircleOutline\r\n        onClick={()=> revomeTodo(todo.id)}\r\n        className='delete-icon'\r\n        />\r\n        <RiEditCircleLine \r\n        onClick={()=> setEdit({id: todo.id, value: todo.text})}\r\n        className='edit-icon'\r\n        />\r\n        </div>\r\n    \r\n    </div>\r\n\r\n    ));\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos]= useState([]);\r\n\r\n    const addTodo = todo=> {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)){\r\n            return;\r\n        }\r\n         \r\n        const newTodos =[todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo =(todoId, newValue)=>{\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)){\r\n        return;}\r\n        \r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item) ));\r\n    };\r\n\r\n    const removeTodo = id =>{\r\n        const removerArr =[...todos].filter(todo => todo.id !== id);\r\n        setTodos (removerArr);\r\n    }\r\n\r\n    const completeTodo = id =>{\r\n        let updatedTodos = todos.map(todo=> {\r\n            if (todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's Your Plan Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} revomeTodo= {removeTodo} updateTodo= {updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}